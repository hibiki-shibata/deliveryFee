/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package indexfile

import io.ktor.application.*
import io.ktor.features.ContentNegotiation
import io.ktor.request.receive
import io.ktor.response.respond
import io.ktor.routing.post
import io.ktor.routing.routing
import io.ktor.serialization.json
import io.ktor.server.engine.embeddedServer
import io.ktor.server.netty.Netty
import io.ktor.http.HttpStatusCode

import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json
import kotlin.math.ceil
import kotlinx.serialization.SerializationException

import java.time.OffsetDateTime

import CalculateTotalDeliveryFee.Deliveryfee

@Serializable
data class FeeCalcRequest(
    val cart_value: Int, // cent
    val delivery_distance: Int, //meter
    val number_of_items: Int,
    val time: String // UTC
)


@Serializable
data class FeecCalcResponse(
    val delivery_fee: Int
)


fun main() {
    embeddedServer(Netty, port = 8080) {

        install(ContentNegotiation) {
            json(Json { ignoreUnknownKeys = true })
        }
        
        routing {
            post("/delivery-fee") {
                try {
                    // Request Data verification
                    val request = call.receive<FeeCalcRequest>()
                    if(!jsonVerificatoin(request)){
                        call.respond(HttpStatusCode.BadRequest, "400: Invalid request format\nNegative number is included or Timeformat is wrong\n\nExample of expected request:\n{\"cart_value\": 10, \"delivery_distance\": 1000, \"number_of_items\": 5, \"time\": \"2024-01-01T12:00:00Z\"}")
                    }

                    // Fee calculation
                    val feecalculation = Deliveryfee();
                    val FinalFee: Int = feecalculation.SumDeliveryFee(request);
                    call.respond(FeecCalcResponse(FinalFee));

                } catch (e: SerializationException) {                   
                    call.respond(HttpStatusCode.BadRequest, "400: Invalid request format\nType of values are wrong or invalid key included\n\nExample of expected request:\n{\"cart_value\": 10, \"delivery_distance\": 1000, \"number_of_items\": 5, \"time\": \"2024-01-01T12:00:00Z\"}")

                } catch (e: Exception) {
                    call.respond(HttpStatusCode.InternalServerError, "500: Internal Server Error")
                    e.printStackTrace()
                    println("something went wrong!")
                }
            }
        }
    }.start(wait = true)
}


// request validation
fun jsonVerificatoin(request: FeeCalcRequest): Boolean {
    return  request.cart_value >= 0 &&
            request.delivery_distance >= 0 &&
            request.number_of_items >= 0 &&
            isValidTime(request.time)
}


fun isValidTime(time: String): Boolean {
    return try {
                OffsetDateTime.parse(time)
                true
            } catch (e: Exception) {
                false
            }
}

// API testing
//Make the name more readable
// Library versinon
